{"ast":null,"code":"var _this = this;\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar TOUCH_SLOP = 10;\nvar PINCH_TIMEOUT_MS = 250;\n\nvar SUPPRESS_SCROLL = function SUPPRESS_SCROLL(e) {\n  // No zooming while drawing, but we'll cancel the scroll event.\n  e.preventDefault();\n  return _this;\n};\n/**\n * The default state for the interaction state machine. Supports zoom and\n * initiating pan and drawing actions.\n */\n\n\nexport var DefaultState = function DefaultState() {\n  var _this2 = this;\n\n  _defineProperty(this, \"handleMouseWheel\", function (e, canvasDraw) {\n    var _canvasDraw$props = canvasDraw.props,\n        disabled = _canvasDraw$props.disabled,\n        enablePanAndZoom = _canvasDraw$props.enablePanAndZoom,\n        mouseZoomFactor = _canvasDraw$props.mouseZoomFactor;\n\n    if (disabled) {\n      return new DisabledState();\n    } else if (enablePanAndZoom && e.ctrlKey) {\n      e.preventDefault();\n      canvasDraw.coordSystem.scaleAtClientPoint(mouseZoomFactor * e.deltaY, clientPointFromEvent(e));\n    }\n\n    return _this2;\n  });\n\n  _defineProperty(this, \"handleDrawStart\", function (e, canvasDraw) {\n    if (canvasDraw.props.disabled) {\n      return new DisabledState();\n    } else if (e.ctrlKey && canvasDraw.props.enablePanAndZoom) {\n      return new PanState().handleDrawStart(e, canvasDraw);\n    } else {\n      return new WaitForPinchState().handleDrawStart(e, canvasDraw);\n    }\n  });\n\n  _defineProperty(this, \"handleDrawMove\", function (e, canvasDraw) {\n    if (canvasDraw.props.disabled) {\n      return new DisabledState();\n    } else {\n      var _viewPointFromEvent = viewPointFromEvent(canvasDraw.coordSystem, e),\n          x = _viewPointFromEvent.x,\n          y = _viewPointFromEvent.y;\n\n      canvasDraw.lazy.update({\n        x: x,\n        y: y\n      });\n      return _this2;\n    }\n  });\n\n  _defineProperty(this, \"handleDrawEnd\", function (e, canvasDraw) {\n    return canvasDraw.props.disabled ? new DisabledState() : _this2;\n  });\n};\n;\n/**\n * This state is used as long as the disabled prop is active. It ignores all\n * events and doesn't prevent default actions. The disabled state can only be\n * triggered from the default state (i.e., while no action is actively being\n * performed).\n */\n\nexport var DisabledState = function DisabledState() {\n  var _this3 = this;\n\n  _defineProperty(this, \"handleMouseWheel\", function (e, canvasDraw) {\n    if (canvasDraw.props.disabled) {\n      return _this3;\n    } else {\n      return new DefaultState().handleMouseWheel(e, canvasDraw);\n    }\n  });\n\n  _defineProperty(this, \"handleDrawStart\", function (e, canvasDraw) {\n    if (canvasDraw.props.disabled) {\n      return _this3;\n    } else {\n      return new DefaultState().handleDrawStart(e, canvasDraw);\n    }\n  });\n\n  _defineProperty(this, \"handleDrawMove\", function (e, canvasDraw) {\n    if (canvasDraw.props.disabled) {\n      return _this3;\n    } else {\n      return new DefaultState().handleDrawMove(e, canvasDraw);\n    }\n  });\n\n  _defineProperty(this, \"handleDrawEnd\", function (e, canvasDraw) {\n    if (canvasDraw.props.disabled) {\n      return _this3;\n    } else {\n      return new DefaultState().handleDrawEnd(e, canvasDraw);\n    }\n  });\n};\n/**\n * This state is active as long as the user is panning the image. This state is\n * retained until the pan ceases.\n */\n\nexport var PanState = function PanState() {\n  var _this4 = this;\n\n  _defineProperty(this, \"handleMouseWheel\", SUPPRESS_SCROLL.bind(this));\n\n  _defineProperty(this, \"handleDrawStart\", function (e, canvasDraw) {\n    e.preventDefault();\n    _this4.dragStart = clientPointFromEvent(e);\n    _this4.panStart = {\n      x: canvasDraw.coordSystem.x,\n      y: canvasDraw.coordSystem.y\n    };\n    return _this4;\n  });\n\n  _defineProperty(this, \"handleDrawMove\", function (e, canvasDraw) {\n    e.preventDefault();\n\n    var _clientPointFromEvent = clientPointFromEvent(e),\n        clientX = _clientPointFromEvent.clientX,\n        clientY = _clientPointFromEvent.clientY;\n\n    var dx = clientX - _this4.dragStart.clientX;\n    var dy = clientY - _this4.dragStart.clientY;\n    canvasDraw.coordSystem.setView({\n      x: _this4.panStart.x + dx,\n      y: _this4.panStart.y + dy\n    });\n    return _this4;\n  });\n\n  _defineProperty(this, \"handleDrawEnd\", function () {\n    return new DefaultState();\n  });\n};\n/**\n * This state is active when the user has initiated the drawing action but has\n * not yet created any lines. We use this state to try and detect a second touch\n * event to initiate a pinch-zoom action. We'll give up on that if enough time\n * or movement happens without a second touch.\n */\n\nexport var WaitForPinchState = function WaitForPinchState() {\n  var _this5 = this;\n\n  _defineProperty(this, \"handleMouseWheel\", SUPPRESS_SCROLL.bind(this));\n\n  _defineProperty(this, \"handleDrawStart\", function (e, canvasDraw) {\n    var enablePanAndZoom = canvasDraw.props.enablePanAndZoom;\n    e.preventDefault(); // We're going to transition immediately into lazy-drawing mode if\n    // pan-and-zoom isn't enabled or if this event wasn't triggered by a touch.\n\n    if (!e.touches || !e.touches.length || !enablePanAndZoom) {\n      return new DrawingState().handleDrawStart(e, canvasDraw);\n    } // If we already have two touch events, we can move straight into pinch/pan\n\n\n    if (enablePanAndZoom && e.touches && e.touches.length >= 2) {\n      return new ScaleOrPanState().handleDrawStart(e, canvasDraw);\n    }\n\n    return _this5.handleDrawMove(e, canvasDraw);\n  });\n\n  _defineProperty(this, \"handleDrawMove\", function (e, canvasDraw) {\n    e.preventDefault(); // If we have two touches, move to pinch/pan (we don't have to recheck\n    // whether zoom is enabled because that happend in draw start).\n\n    if (e.touches && e.touches.length >= 2) {\n      // Use the start draw to handler to transition.\n      return new ScaleOrPanState().handleDrawStart(e, canvasDraw);\n    }\n\n    var clientPt = clientPointFromEvent(e);\n\n    _this5.deferredPoints.push(clientPt); // If we've already moved far enough, or if enough time has passed, give up\n    // and switch over to drawing.\n\n\n    if (new Date().valueOf() - _this5.startTimestamp < PINCH_TIMEOUT_MS) {\n      if (_this5.startClientPoint === null) {\n        _this5.startClientPoint = clientPt;\n      } // Note that we're using \"manhattan distance\" rather than computing a\n      // hypotenuse here as a cheap approximation\n\n\n      var d = Math.abs(clientPt.clientX - _this5.startClientPoint.clientX) + Math.abs(clientPt.clientY - _this5.startClientPoint.clientY);\n\n      if (d < TOUCH_SLOP) {\n        // We're not ready to give up yet.\n        return _this5;\n      }\n    } // Okay, give up and start drawing.\n\n\n    return _this5.issueDeferredPoints(canvasDraw);\n  });\n\n  _defineProperty(this, \"handleDrawEnd\", function (e, canvasDraw) {\n    // The user stopped drawing before we decided what to do. Just treat this as\n    // if they were drawing all along.\n    return _this5.issueDeferredPoints(canvasDraw).handleDrawEnd(e, canvasDraw);\n  });\n\n  _defineProperty(this, \"issueDeferredPoints\", function (canvasDraw) {\n    // Time to give up. Play our deferred points out to the drawing state.\n    // The first point will have been a start draw.\n    var nextState = new DrawingState();\n\n    for (var i = 0; i < _this5.deferredPoints.length; i++) {\n      var deferredPt = _this5.deferredPoints[i];\n      var syntheticEvt = new SyntheticEvent(deferredPt);\n      var func = i === 0 ? nextState.handleDrawStart : nextState.handleDrawMove;\n      nextState = func(syntheticEvt, canvasDraw);\n    }\n\n    return nextState;\n  });\n\n  this.startClientPoint = null;\n  this.startTimestamp = new Date().valueOf();\n  this.deferredPoints = [];\n};\n/**\n * This state is active when the user has added at least two touch points but we\n * don't yet know if they intend to pan or zoom.\n */\n\nexport var ScaleOrPanState = function ScaleOrPanState() {\n  var _this6 = this;\n\n  _defineProperty(this, \"handleMouseWheel\", SUPPRESS_SCROLL.bind(this));\n\n  _defineProperty(this, \"handleDrawStart\", function (e, canvasDraw) {\n    e.preventDefault();\n\n    if (!e.touches || e.touches.length < 2) {\n      return new DefaultState();\n    }\n\n    _this6.start = _this6.getTouchMetrics(e);\n    _this6.panStart = {\n      x: canvasDraw.coordSystem.x,\n      y: canvasDraw.coordSystem.y\n    };\n    _this6.scaleStart = canvasDraw.coordSystem.scale;\n    return _this6;\n  });\n\n  _defineProperty(this, \"handleDrawMove\", function (e, canvasDraw) {\n    e.preventDefault();\n\n    if (!e.touches || e.touches.length < 2) {\n      return new DefaultState();\n    }\n\n    var _this6$recentMetrics = _this6.recentMetrics = _this6.getTouchMetrics(e),\n        centroid = _this6$recentMetrics.centroid,\n        distance = _this6$recentMetrics.distance; // Switch to scaling?\n\n\n    var dd = Math.abs(distance - _this6.start.distance);\n\n    if (dd >= TOUCH_SLOP) {\n      return new TouchScaleState(_this6).handleDrawMove(e, canvasDraw);\n    } // Switch to panning?\n\n\n    var dx = centroid.clientX - _this6.start.centroid.clientX;\n    var dy = centroid.clientY - _this6.start.centroid.clientY;\n    var dc = Math.abs(dx) + Math.abs(dy);\n\n    if (dc >= TOUCH_SLOP) {\n      return new TouchPanState(_this6).handleDrawMove(e, canvasDraw);\n    } // Not enough movement yet\n\n\n    return _this6;\n  });\n\n  _defineProperty(this, \"handleDrawEnd\", function () {\n    return new DefaultState();\n  });\n\n  _defineProperty(this, \"getTouchMetrics\", function (e) {\n    var _clientPointFromEvent2 = clientPointFromEvent(e.touches[0]),\n        t1x = _clientPointFromEvent2.clientX,\n        t1y = _clientPointFromEvent2.clientY;\n\n    var _clientPointFromEvent3 = clientPointFromEvent(e.touches[1]),\n        t2x = _clientPointFromEvent3.clientX,\n        t2y = _clientPointFromEvent3.clientY;\n\n    var dx = t2x - t1x;\n    var dy = t2y - t1y;\n    return {\n      t1: {\n        clientX: t1x,\n        clientY: t1y\n      },\n      t2: {\n        clientX: t2x,\n        clientY: t2y\n      },\n      distance: Math.sqrt(dx * dx + dy * dy),\n      centroid: {\n        clientX: (t1x + t2x) / 2.0,\n        clientY: (t1y + t2y) / 2.0\n      }\n    };\n  });\n};\n/**\n * The user is actively using touch gestures to pan the image.\n */\n\nexport var TouchPanState = function TouchPanState(scaleOrPanState) {\n  var _this7 = this;\n\n  _defineProperty(this, \"handleMouseWheel\", SUPPRESS_SCROLL.bind(this));\n\n  _defineProperty(this, \"handleDrawStart\", function () {\n    return _this7;\n  });\n\n  _defineProperty(this, \"handleDrawMove\", function (e, canvasDraw) {\n    e.preventDefault();\n\n    if (!e.touches || e.touches.length < 2) {\n      return new DefaultState();\n    }\n\n    var ref = _this7.scaleOrPanState;\n\n    var _ref$recentMetrics = ref.recentMetrics = ref.getTouchMetrics(e),\n        centroid = _ref$recentMetrics.centroid,\n        distance = _ref$recentMetrics.distance;\n\n    var dx = centroid.clientX - ref.start.centroid.clientX;\n    var dy = centroid.clientY - ref.start.centroid.clientY;\n    canvasDraw.setView({\n      x: ref.panStart.x + dx,\n      y: ref.panStart.y + dy\n    });\n    return _this7;\n  });\n\n  _defineProperty(this, \"handleDrawEnd\", function () {\n    return new DefaultState();\n  });\n\n  this.scaleOrPanState = scaleOrPanState;\n};\n/**\n * The user is actively using touch gestures to scale the drawing.\n */\n\nexport var TouchScaleState = function TouchScaleState(scaleOrPanState) {\n  var _this8 = this;\n\n  _defineProperty(this, \"handleMouseWheel\", SUPPRESS_SCROLL.bind(this));\n\n  _defineProperty(this, \"handleDrawStart\", function () {\n    return _this8;\n  });\n\n  _defineProperty(this, \"handleDrawMove\", function (e, canvasDraw) {\n    e.preventDefault();\n\n    if (!e.touches || e.touches.length < 2) {\n      return new DefaultState();\n    }\n\n    var ref = _this8.scaleOrPanState;\n\n    var _ref$recentMetrics2 = ref.recentMetrics = ref.getTouchMetrics(e),\n        centroid = _ref$recentMetrics2.centroid,\n        distance = _ref$recentMetrics2.distance;\n\n    var targetScale = ref.scaleStart * (distance / ref.start.distance);\n    var dScale = targetScale - canvasDraw.coordSystem.scale;\n    canvasDraw.coordSystem.scaleAtClientPoint(dScale, centroid);\n    return _this8;\n  });\n\n  _defineProperty(this, \"handleDrawEnd\", function () {\n    return new DefaultState();\n  });\n\n  this.scaleOrPanState = scaleOrPanState;\n};\n/**\n * This state is active when the user is drawing.\n */\n\nexport var DrawingState = function DrawingState() {\n  var _this9 = this;\n\n  _defineProperty(this, \"handleMouseWheel\", SUPPRESS_SCROLL.bind(this));\n\n  _defineProperty(this, \"handleDrawStart\", function (e, canvasDraw) {\n    e.preventDefault();\n\n    if (e.touches && e.touches.length) {\n      // on touch, set catenary position to touch pos\n      var _viewPointFromEvent2 = viewPointFromEvent(canvasDraw.coordSystem, e),\n          x = _viewPointFromEvent2.x,\n          y = _viewPointFromEvent2.y;\n\n      canvasDraw.lazy.update({\n        x: x,\n        y: y\n      }, {\n        both: true\n      });\n    }\n\n    return _this9.handleDrawMove(e, canvasDraw);\n  });\n\n  _defineProperty(this, \"handleDrawMove\", function (e, canvasDraw) {\n    e.preventDefault();\n\n    var _viewPointFromEvent3 = viewPointFromEvent(canvasDraw.coordSystem, e),\n        x = _viewPointFromEvent3.x,\n        y = _viewPointFromEvent3.y;\n\n    canvasDraw.lazy.update({\n      x: x,\n      y: y\n    });\n    var isDisabled = !canvasDraw.lazy.isEnabled();\n\n    if (!_this9.isDrawing || isDisabled) {\n      // Start drawing and add point\n      canvasDraw.points.push(canvasDraw.clampPointToDocument(canvasDraw.lazy.brush.toObject()));\n      _this9.isDrawing = true;\n    } // Add new point\n\n\n    canvasDraw.points.push(canvasDraw.clampPointToDocument(canvasDraw.lazy.brush.toObject())); // Draw current points\n\n    canvasDraw.drawPoints({\n      points: canvasDraw.points,\n      brushColor: canvasDraw.props.brushColor,\n      brushRadius: canvasDraw.props.brushRadius\n    });\n    return _this9;\n  });\n\n  _defineProperty(this, \"handleDrawEnd\", function (e, canvasDraw) {\n    e.preventDefault(); // Draw to this end pos\n\n    _this9.handleDrawMove(e, canvasDraw);\n\n    canvasDraw.saveLine();\n    return new DefaultState();\n  });\n\n  this.isDrawing = false;\n};\nexport var SyntheticEvent = function SyntheticEvent(_ref) {\n  var clientX = _ref.clientX,\n      clientY = _ref.clientY;\n\n  _defineProperty(this, \"preventDefault\", function () {});\n\n  this.clientX = clientX;\n  this.clientY = clientY;\n  this.touches = [{\n    clientX: clientX,\n    clientY: clientY\n  }];\n};\nexport function clientPointFromEvent(e) {\n  // use cursor pos as default\n  var clientX = e.clientX;\n  var clientY = e.clientY; // use first touch if available\n\n  if (e.changedTouches && e.changedTouches.length > 0) {\n    clientX = e.changedTouches[0].clientX;\n    clientY = e.changedTouches[0].clientY;\n  }\n\n  return {\n    clientX: clientX,\n    clientY: clientY\n  };\n}\nexport function viewPointFromEvent(coordSystem, e) {\n  return coordSystem.clientPointToViewPoint(clientPointFromEvent(e));\n}","map":{"version":3,"sources":["/Users/akhandafm/Desktop/examenproject/ajax_project/node_modules/react-canvas-draw/es/interactionStateMachine.js"],"names":["_this","_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","TOUCH_SLOP","PINCH_TIMEOUT_MS","SUPPRESS_SCROLL","e","preventDefault","DefaultState","_this2","canvasDraw","_canvasDraw$props","props","disabled","enablePanAndZoom","mouseZoomFactor","DisabledState","ctrlKey","coordSystem","scaleAtClientPoint","deltaY","clientPointFromEvent","PanState","handleDrawStart","WaitForPinchState","_viewPointFromEvent","viewPointFromEvent","x","y","lazy","update","_this3","handleMouseWheel","handleDrawMove","handleDrawEnd","_this4","bind","dragStart","panStart","_clientPointFromEvent","clientX","clientY","dx","dy","setView","_this5","touches","length","DrawingState","ScaleOrPanState","clientPt","deferredPoints","push","Date","valueOf","startTimestamp","startClientPoint","d","Math","abs","issueDeferredPoints","nextState","i","deferredPt","syntheticEvt","SyntheticEvent","func","_this6","start","getTouchMetrics","scaleStart","scale","_this6$recentMetrics","recentMetrics","centroid","distance","dd","TouchScaleState","dc","TouchPanState","_clientPointFromEvent2","t1x","t1y","_clientPointFromEvent3","t2x","t2y","t1","t2","sqrt","scaleOrPanState","_this7","ref","_ref$recentMetrics","_this8","_ref$recentMetrics2","targetScale","dScale","_this9","_viewPointFromEvent2","both","_viewPointFromEvent3","isDisabled","isEnabled","isDrawing","points","clampPointToDocument","brush","toObject","drawPoints","brushColor","brushRadius","saveLine","_ref","changedTouches","clientPointToViewPoint"],"mappings":"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","sourcesContent":["var _this = this;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar TOUCH_SLOP = 10;\nvar PINCH_TIMEOUT_MS = 250;\n\nvar SUPPRESS_SCROLL = function SUPPRESS_SCROLL(e) {\n  // No zooming while drawing, but we'll cancel the scroll event.\n  e.preventDefault();\n  return _this;\n};\n/**\n * The default state for the interaction state machine. Supports zoom and\n * initiating pan and drawing actions.\n */\n\n\nexport var DefaultState = function DefaultState() {\n  var _this2 = this;\n\n  _defineProperty(this, \"handleMouseWheel\", function (e, canvasDraw) {\n    var _canvasDraw$props = canvasDraw.props,\n        disabled = _canvasDraw$props.disabled,\n        enablePanAndZoom = _canvasDraw$props.enablePanAndZoom,\n        mouseZoomFactor = _canvasDraw$props.mouseZoomFactor;\n\n    if (disabled) {\n      return new DisabledState();\n    } else if (enablePanAndZoom && e.ctrlKey) {\n      e.preventDefault();\n      canvasDraw.coordSystem.scaleAtClientPoint(mouseZoomFactor * e.deltaY, clientPointFromEvent(e));\n    }\n\n    return _this2;\n  });\n\n  _defineProperty(this, \"handleDrawStart\", function (e, canvasDraw) {\n    if (canvasDraw.props.disabled) {\n      return new DisabledState();\n    } else if (e.ctrlKey && canvasDraw.props.enablePanAndZoom) {\n      return new PanState().handleDrawStart(e, canvasDraw);\n    } else {\n      return new WaitForPinchState().handleDrawStart(e, canvasDraw);\n    }\n  });\n\n  _defineProperty(this, \"handleDrawMove\", function (e, canvasDraw) {\n    if (canvasDraw.props.disabled) {\n      return new DisabledState();\n    } else {\n      var _viewPointFromEvent = viewPointFromEvent(canvasDraw.coordSystem, e),\n          x = _viewPointFromEvent.x,\n          y = _viewPointFromEvent.y;\n\n      canvasDraw.lazy.update({\n        x: x,\n        y: y\n      });\n      return _this2;\n    }\n  });\n\n  _defineProperty(this, \"handleDrawEnd\", function (e, canvasDraw) {\n    return canvasDraw.props.disabled ? new DisabledState() : _this2;\n  });\n};\n;\n/**\n * This state is used as long as the disabled prop is active. It ignores all\n * events and doesn't prevent default actions. The disabled state can only be\n * triggered from the default state (i.e., while no action is actively being\n * performed).\n */\n\nexport var DisabledState = function DisabledState() {\n  var _this3 = this;\n\n  _defineProperty(this, \"handleMouseWheel\", function (e, canvasDraw) {\n    if (canvasDraw.props.disabled) {\n      return _this3;\n    } else {\n      return new DefaultState().handleMouseWheel(e, canvasDraw);\n    }\n  });\n\n  _defineProperty(this, \"handleDrawStart\", function (e, canvasDraw) {\n    if (canvasDraw.props.disabled) {\n      return _this3;\n    } else {\n      return new DefaultState().handleDrawStart(e, canvasDraw);\n    }\n  });\n\n  _defineProperty(this, \"handleDrawMove\", function (e, canvasDraw) {\n    if (canvasDraw.props.disabled) {\n      return _this3;\n    } else {\n      return new DefaultState().handleDrawMove(e, canvasDraw);\n    }\n  });\n\n  _defineProperty(this, \"handleDrawEnd\", function (e, canvasDraw) {\n    if (canvasDraw.props.disabled) {\n      return _this3;\n    } else {\n      return new DefaultState().handleDrawEnd(e, canvasDraw);\n    }\n  });\n};\n/**\n * This state is active as long as the user is panning the image. This state is\n * retained until the pan ceases.\n */\n\nexport var PanState = function PanState() {\n  var _this4 = this;\n\n  _defineProperty(this, \"handleMouseWheel\", SUPPRESS_SCROLL.bind(this));\n\n  _defineProperty(this, \"handleDrawStart\", function (e, canvasDraw) {\n    e.preventDefault();\n    _this4.dragStart = clientPointFromEvent(e);\n    _this4.panStart = {\n      x: canvasDraw.coordSystem.x,\n      y: canvasDraw.coordSystem.y\n    };\n    return _this4;\n  });\n\n  _defineProperty(this, \"handleDrawMove\", function (e, canvasDraw) {\n    e.preventDefault();\n\n    var _clientPointFromEvent = clientPointFromEvent(e),\n        clientX = _clientPointFromEvent.clientX,\n        clientY = _clientPointFromEvent.clientY;\n\n    var dx = clientX - _this4.dragStart.clientX;\n    var dy = clientY - _this4.dragStart.clientY;\n    canvasDraw.coordSystem.setView({\n      x: _this4.panStart.x + dx,\n      y: _this4.panStart.y + dy\n    });\n    return _this4;\n  });\n\n  _defineProperty(this, \"handleDrawEnd\", function () {\n    return new DefaultState();\n  });\n};\n/**\n * This state is active when the user has initiated the drawing action but has\n * not yet created any lines. We use this state to try and detect a second touch\n * event to initiate a pinch-zoom action. We'll give up on that if enough time\n * or movement happens without a second touch.\n */\n\nexport var WaitForPinchState = function WaitForPinchState() {\n  var _this5 = this;\n\n  _defineProperty(this, \"handleMouseWheel\", SUPPRESS_SCROLL.bind(this));\n\n  _defineProperty(this, \"handleDrawStart\", function (e, canvasDraw) {\n    var enablePanAndZoom = canvasDraw.props.enablePanAndZoom;\n    e.preventDefault(); // We're going to transition immediately into lazy-drawing mode if\n    // pan-and-zoom isn't enabled or if this event wasn't triggered by a touch.\n\n    if (!e.touches || !e.touches.length || !enablePanAndZoom) {\n      return new DrawingState().handleDrawStart(e, canvasDraw);\n    } // If we already have two touch events, we can move straight into pinch/pan\n\n\n    if (enablePanAndZoom && e.touches && e.touches.length >= 2) {\n      return new ScaleOrPanState().handleDrawStart(e, canvasDraw);\n    }\n\n    return _this5.handleDrawMove(e, canvasDraw);\n  });\n\n  _defineProperty(this, \"handleDrawMove\", function (e, canvasDraw) {\n    e.preventDefault(); // If we have two touches, move to pinch/pan (we don't have to recheck\n    // whether zoom is enabled because that happend in draw start).\n\n    if (e.touches && e.touches.length >= 2) {\n      // Use the start draw to handler to transition.\n      return new ScaleOrPanState().handleDrawStart(e, canvasDraw);\n    }\n\n    var clientPt = clientPointFromEvent(e);\n\n    _this5.deferredPoints.push(clientPt); // If we've already moved far enough, or if enough time has passed, give up\n    // and switch over to drawing.\n\n\n    if (new Date().valueOf() - _this5.startTimestamp < PINCH_TIMEOUT_MS) {\n      if (_this5.startClientPoint === null) {\n        _this5.startClientPoint = clientPt;\n      } // Note that we're using \"manhattan distance\" rather than computing a\n      // hypotenuse here as a cheap approximation\n\n\n      var d = Math.abs(clientPt.clientX - _this5.startClientPoint.clientX) + Math.abs(clientPt.clientY - _this5.startClientPoint.clientY);\n\n      if (d < TOUCH_SLOP) {\n        // We're not ready to give up yet.\n        return _this5;\n      }\n    } // Okay, give up and start drawing.\n\n\n    return _this5.issueDeferredPoints(canvasDraw);\n  });\n\n  _defineProperty(this, \"handleDrawEnd\", function (e, canvasDraw) {\n    // The user stopped drawing before we decided what to do. Just treat this as\n    // if they were drawing all along.\n    return _this5.issueDeferredPoints(canvasDraw).handleDrawEnd(e, canvasDraw);\n  });\n\n  _defineProperty(this, \"issueDeferredPoints\", function (canvasDraw) {\n    // Time to give up. Play our deferred points out to the drawing state.\n    // The first point will have been a start draw.\n    var nextState = new DrawingState();\n\n    for (var i = 0; i < _this5.deferredPoints.length; i++) {\n      var deferredPt = _this5.deferredPoints[i];\n      var syntheticEvt = new SyntheticEvent(deferredPt);\n      var func = i === 0 ? nextState.handleDrawStart : nextState.handleDrawMove;\n      nextState = func(syntheticEvt, canvasDraw);\n    }\n\n    return nextState;\n  });\n\n  this.startClientPoint = null;\n  this.startTimestamp = new Date().valueOf();\n  this.deferredPoints = [];\n};\n/**\n * This state is active when the user has added at least two touch points but we\n * don't yet know if they intend to pan or zoom.\n */\n\nexport var ScaleOrPanState = function ScaleOrPanState() {\n  var _this6 = this;\n\n  _defineProperty(this, \"handleMouseWheel\", SUPPRESS_SCROLL.bind(this));\n\n  _defineProperty(this, \"handleDrawStart\", function (e, canvasDraw) {\n    e.preventDefault();\n\n    if (!e.touches || e.touches.length < 2) {\n      return new DefaultState();\n    }\n\n    _this6.start = _this6.getTouchMetrics(e);\n    _this6.panStart = {\n      x: canvasDraw.coordSystem.x,\n      y: canvasDraw.coordSystem.y\n    };\n    _this6.scaleStart = canvasDraw.coordSystem.scale;\n    return _this6;\n  });\n\n  _defineProperty(this, \"handleDrawMove\", function (e, canvasDraw) {\n    e.preventDefault();\n\n    if (!e.touches || e.touches.length < 2) {\n      return new DefaultState();\n    }\n\n    var _this6$recentMetrics = _this6.recentMetrics = _this6.getTouchMetrics(e),\n        centroid = _this6$recentMetrics.centroid,\n        distance = _this6$recentMetrics.distance; // Switch to scaling?\n\n\n    var dd = Math.abs(distance - _this6.start.distance);\n\n    if (dd >= TOUCH_SLOP) {\n      return new TouchScaleState(_this6).handleDrawMove(e, canvasDraw);\n    } // Switch to panning?\n\n\n    var dx = centroid.clientX - _this6.start.centroid.clientX;\n    var dy = centroid.clientY - _this6.start.centroid.clientY;\n    var dc = Math.abs(dx) + Math.abs(dy);\n\n    if (dc >= TOUCH_SLOP) {\n      return new TouchPanState(_this6).handleDrawMove(e, canvasDraw);\n    } // Not enough movement yet\n\n\n    return _this6;\n  });\n\n  _defineProperty(this, \"handleDrawEnd\", function () {\n    return new DefaultState();\n  });\n\n  _defineProperty(this, \"getTouchMetrics\", function (e) {\n    var _clientPointFromEvent2 = clientPointFromEvent(e.touches[0]),\n        t1x = _clientPointFromEvent2.clientX,\n        t1y = _clientPointFromEvent2.clientY;\n\n    var _clientPointFromEvent3 = clientPointFromEvent(e.touches[1]),\n        t2x = _clientPointFromEvent3.clientX,\n        t2y = _clientPointFromEvent3.clientY;\n\n    var dx = t2x - t1x;\n    var dy = t2y - t1y;\n    return {\n      t1: {\n        clientX: t1x,\n        clientY: t1y\n      },\n      t2: {\n        clientX: t2x,\n        clientY: t2y\n      },\n      distance: Math.sqrt(dx * dx + dy * dy),\n      centroid: {\n        clientX: (t1x + t2x) / 2.0,\n        clientY: (t1y + t2y) / 2.0\n      }\n    };\n  });\n};\n/**\n * The user is actively using touch gestures to pan the image.\n */\n\nexport var TouchPanState = function TouchPanState(scaleOrPanState) {\n  var _this7 = this;\n\n  _defineProperty(this, \"handleMouseWheel\", SUPPRESS_SCROLL.bind(this));\n\n  _defineProperty(this, \"handleDrawStart\", function () {\n    return _this7;\n  });\n\n  _defineProperty(this, \"handleDrawMove\", function (e, canvasDraw) {\n    e.preventDefault();\n\n    if (!e.touches || e.touches.length < 2) {\n      return new DefaultState();\n    }\n\n    var ref = _this7.scaleOrPanState;\n\n    var _ref$recentMetrics = ref.recentMetrics = ref.getTouchMetrics(e),\n        centroid = _ref$recentMetrics.centroid,\n        distance = _ref$recentMetrics.distance;\n\n    var dx = centroid.clientX - ref.start.centroid.clientX;\n    var dy = centroid.clientY - ref.start.centroid.clientY;\n    canvasDraw.setView({\n      x: ref.panStart.x + dx,\n      y: ref.panStart.y + dy\n    });\n    return _this7;\n  });\n\n  _defineProperty(this, \"handleDrawEnd\", function () {\n    return new DefaultState();\n  });\n\n  this.scaleOrPanState = scaleOrPanState;\n};\n/**\n * The user is actively using touch gestures to scale the drawing.\n */\n\nexport var TouchScaleState = function TouchScaleState(scaleOrPanState) {\n  var _this8 = this;\n\n  _defineProperty(this, \"handleMouseWheel\", SUPPRESS_SCROLL.bind(this));\n\n  _defineProperty(this, \"handleDrawStart\", function () {\n    return _this8;\n  });\n\n  _defineProperty(this, \"handleDrawMove\", function (e, canvasDraw) {\n    e.preventDefault();\n\n    if (!e.touches || e.touches.length < 2) {\n      return new DefaultState();\n    }\n\n    var ref = _this8.scaleOrPanState;\n\n    var _ref$recentMetrics2 = ref.recentMetrics = ref.getTouchMetrics(e),\n        centroid = _ref$recentMetrics2.centroid,\n        distance = _ref$recentMetrics2.distance;\n\n    var targetScale = ref.scaleStart * (distance / ref.start.distance);\n    var dScale = targetScale - canvasDraw.coordSystem.scale;\n    canvasDraw.coordSystem.scaleAtClientPoint(dScale, centroid);\n    return _this8;\n  });\n\n  _defineProperty(this, \"handleDrawEnd\", function () {\n    return new DefaultState();\n  });\n\n  this.scaleOrPanState = scaleOrPanState;\n};\n/**\n * This state is active when the user is drawing.\n */\n\nexport var DrawingState = function DrawingState() {\n  var _this9 = this;\n\n  _defineProperty(this, \"handleMouseWheel\", SUPPRESS_SCROLL.bind(this));\n\n  _defineProperty(this, \"handleDrawStart\", function (e, canvasDraw) {\n    e.preventDefault();\n\n    if (e.touches && e.touches.length) {\n      // on touch, set catenary position to touch pos\n      var _viewPointFromEvent2 = viewPointFromEvent(canvasDraw.coordSystem, e),\n          x = _viewPointFromEvent2.x,\n          y = _viewPointFromEvent2.y;\n\n      canvasDraw.lazy.update({\n        x: x,\n        y: y\n      }, {\n        both: true\n      });\n    }\n\n    return _this9.handleDrawMove(e, canvasDraw);\n  });\n\n  _defineProperty(this, \"handleDrawMove\", function (e, canvasDraw) {\n    e.preventDefault();\n\n    var _viewPointFromEvent3 = viewPointFromEvent(canvasDraw.coordSystem, e),\n        x = _viewPointFromEvent3.x,\n        y = _viewPointFromEvent3.y;\n\n    canvasDraw.lazy.update({\n      x: x,\n      y: y\n    });\n    var isDisabled = !canvasDraw.lazy.isEnabled();\n\n    if (!_this9.isDrawing || isDisabled) {\n      // Start drawing and add point\n      canvasDraw.points.push(canvasDraw.clampPointToDocument(canvasDraw.lazy.brush.toObject()));\n      _this9.isDrawing = true;\n    } // Add new point\n\n\n    canvasDraw.points.push(canvasDraw.clampPointToDocument(canvasDraw.lazy.brush.toObject())); // Draw current points\n\n    canvasDraw.drawPoints({\n      points: canvasDraw.points,\n      brushColor: canvasDraw.props.brushColor,\n      brushRadius: canvasDraw.props.brushRadius\n    });\n    return _this9;\n  });\n\n  _defineProperty(this, \"handleDrawEnd\", function (e, canvasDraw) {\n    e.preventDefault(); // Draw to this end pos\n\n    _this9.handleDrawMove(e, canvasDraw);\n\n    canvasDraw.saveLine();\n    return new DefaultState();\n  });\n\n  this.isDrawing = false;\n};\nexport var SyntheticEvent = function SyntheticEvent(_ref) {\n  var clientX = _ref.clientX,\n      clientY = _ref.clientY;\n\n  _defineProperty(this, \"preventDefault\", function () {});\n\n  this.clientX = clientX;\n  this.clientY = clientY;\n  this.touches = [{\n    clientX: clientX,\n    clientY: clientY\n  }];\n};\nexport function clientPointFromEvent(e) {\n  // use cursor pos as default\n  var clientX = e.clientX;\n  var clientY = e.clientY; // use first touch if available\n\n  if (e.changedTouches && e.changedTouches.length > 0) {\n    clientX = e.changedTouches[0].clientX;\n    clientY = e.changedTouches[0].clientY;\n  }\n\n  return {\n    clientX: clientX,\n    clientY: clientY\n  };\n}\nexport function viewPointFromEvent(coordSystem, e) {\n  return coordSystem.clientPointToViewPoint(clientPointFromEvent(e));\n}"]},"metadata":{},"sourceType":"module"}