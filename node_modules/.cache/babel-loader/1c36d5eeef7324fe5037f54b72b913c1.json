{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/**\n * @type {ViewPoint}\n */\n\n\nvar NULL_VIEW_POINT = Object.freeze({\n  x: 0,\n  y: 0,\n  untransformedX: 0,\n  untransformedY: 0\n});\n/**\n * @type {CanvasBounds}\n */\n\nvar NULL_BOUNDS = Object.freeze({\n  canvasWidth: 0,\n  canvasHeight: 0,\n  left: 0,\n  top: 0,\n  right: 0,\n  bottom: 0,\n  viewMin: NULL_VIEW_POINT,\n  viewMax: NULL_VIEW_POINT\n});\n/**\n * The identity matrix (a transform that results in view coordinates that are\n * identical to relative client coordinates).\n * @type {Matrix}\n */\n\nexport var IDENTITY = Object.freeze({\n  a: 1,\n  b: 0,\n  c: 0,\n  d: 1,\n  e: 0,\n  f: 0\n});\n\nfunction valueOrDefault(value, defaultValue) {\n  if (value === null || typeof value === \"undefined\") {\n    return defaultValue;\n  } else {\n    return value;\n  }\n}\n/**\n * Facilitates calculation and manipulation of a zoom-and-pannable view within a\n * canvas.\n */\n\n\nvar CoordinateSystem = /*#__PURE__*/function () {\n  /**\n   * @typedef Extents\n   * @property {number} min the minimal value in the range\n   * @property {number} max the maximal value in the range\n   */\n\n  /**\n   * @typedef Size\n   * @property {number} width the span of the element's horizontal axis\n   * @property {number} height the span of the element's vertical axis\n   */\n\n  /**\n   * @param {Object} parameters the initialization parameters for this instance.\n   * @param {Extents} parameters.scaleExtents the minimum and maximum allowable scale factor.\n   * @param {Sizee} parameters.documentSize the width and height of the document, in client space.\n   */\n  function CoordinateSystem(_ref) {\n    var _this = this;\n\n    var scaleExtents = _ref.scaleExtents,\n        documentSize = _ref.documentSize;\n\n    _defineProperty(this, \"_scaleExtents\", void 0);\n\n    _defineProperty(this, \"_documentSize\", void 0);\n\n    _defineProperty(this, \"_canvas\", null);\n\n    _defineProperty(this, \"_view\", {\n      scale: 1.0,\n      x: 0,\n      y: 0\n    });\n\n    _defineProperty(this, \"_viewChangeListeners\", new Set());\n\n    _defineProperty(this, \"setScale\", function (scale) {\n      _this.setView({\n        scale: scale\n      });\n    });\n\n    _defineProperty(this, \"clampView\", function (_ref2) {\n      var scale = _ref2.scale,\n          x = _ref2.x,\n          y = _ref2.y;\n      var _this$scaleExtents = _this.scaleExtents,\n          min = _this$scaleExtents.min,\n          max = _this$scaleExtents.max;\n      var _this$documentSize = _this.documentSize,\n          width = _this$documentSize.width,\n          height = _this$documentSize.height;\n\n      var _ref3 = _this.canvasRect || NULL_BOUNDS,\n          left = _ref3.left,\n          top = _ref3.top,\n          right = _ref3.right,\n          bottom = _ref3.bottom;\n\n      var canvasWidth = right - left;\n      var canvasHeight = bottom - top;\n      var maxx = canvasWidth / 2;\n      var minx = -(width * _this._view.scale - canvasWidth / 2);\n      var maxy = canvasHeight / 2;\n      var miny = -(height * _this._view.scale - canvasHeight / 2); // Clamp values to acceptible range.\n\n      return {\n        scale: Math.min(Math.max(scale, min), max),\n        x: Math.min(Math.max(x, minx), maxx),\n        y: Math.min(Math.max(y, miny), maxy)\n      };\n    });\n\n    _defineProperty(this, \"resetView\", function () {\n      _this.setView({\n        scale: 1.0,\n        x: 0,\n        y: 0\n      });\n    });\n\n    _defineProperty(this, \"setView\", function (view) {\n      var newView = _this.clampView(_extends({}, _this._view, view || {}));\n\n      var _this$_view = _this._view,\n          scale = _this$_view.scale,\n          x = _this$_view.x,\n          y = _this$_view.y; // Only trigger if the view actually changed.\n\n      if (newView.scale !== scale || newView.x !== x || newView.y !== y) {\n        _this._view = newView;\n\n        _this._viewChangeListeners.forEach(function (listener) {\n          return listener && listener(newView);\n        });\n      }\n\n      return _extends({}, _this._view);\n    });\n\n    _defineProperty(this, \"scaleAtClientPoint\", function (deltaScale, clientPoint) {\n      var viewPt = _this.clientPointToViewPoint(clientPoint);\n\n      var newView = _this.clampView(_extends({}, _this._view, {\n        scale: _this._view.scale + deltaScale\n      }));\n\n      var clientPtPostScale = _this.viewPointToClientPoint(viewPt, newView);\n\n      newView.x = _this._view.x - (clientPtPostScale.clientX - clientPoint.clientX);\n      newView.y = _this._view.y - (clientPtPostScale.clientY - clientPoint.clientY);\n      return _this.setView(newView);\n    });\n\n    _defineProperty(this, \"clientPointToViewPoint\", function (_ref4, view) {\n      var clientX = _ref4.clientX,\n          clientY = _ref4.clientY;\n\n      if (view === void 0) {\n        view = _this._view;\n      }\n\n      var _ref5 = _this.canvasRect || NULL_BOUNDS,\n          left = _ref5.left,\n          top = _ref5.top;\n\n      var relativeClientX = clientX - left;\n      var relativeClientY = clientY - top;\n      return {\n        x: (relativeClientX - view.x) / view.scale,\n        y: (relativeClientY - view.y) / view.scale,\n        relativeClientX: relativeClientX,\n        relativeClientY: relativeClientY\n      };\n    });\n\n    _defineProperty(this, \"viewPointToClientPoint\", function (_ref6, view) {\n      var x = _ref6.x,\n          y = _ref6.y;\n\n      if (view === void 0) {\n        view = _this._view;\n      }\n\n      var _ref7 = _this.canvasRect || NULL_BOUNDS,\n          left = _ref7.left,\n          top = _ref7.top;\n\n      var relativeX = x * view.scale + view.x;\n      var relativeY = y * view.scale + view.y;\n      var clientX = relativeX + left;\n      var clientY = relativeY + top;\n      return {\n        clientX: clientX,\n        clientY: clientY,\n        relativeX: relativeX,\n        relativeY: relativeY,\n        x: clientX,\n        y: clientY\n      };\n    });\n\n    _defineProperty(this, \"attachViewChangeListener\", function (listener) {\n      _this._viewChangeListeners.add(listener);\n    });\n\n    this._scaleExtents = scaleExtents;\n    this._documentSize = documentSize;\n  }\n  /**\n   * @type {Extents}\n   */\n\n\n  _createClass(CoordinateSystem, [{\n    key: \"canvas\",\n\n    /**\n     * @returns {Canvas} the canvas currently associated with this instance.\n     */\n    get: function get() {\n      return this._canvas;\n    }\n    /**\n     * Updates the canvas for this coordinate system and recalculates the view.\n     * @param {Canvas} canvas the new canvas to associate with this instance.\n     */\n    ,\n    set: function set(canvas) {\n      this._canvas = canvas;\n      this.setView();\n    }\n    /**\n     * @returns {number} the current zoom factor\n     */\n\n  }, {\n    key: \"scale\",\n    get: function get() {\n      return this._view.scale;\n    }\n    /**\n     * Sets the zoom factor (clamped by the scale extents) and updates the view.\n     * @param {number} the new zoom factor\n     */\n\n  }, {\n    key: \"x\",\n\n    /**\n     * @returns {number} the horizontal component of the current pan offset\n     */\n    get: function get() {\n      return this._view.x;\n    }\n    /**\n     * Sets the horizontal pan offset (clamped by the document extents) and\n     * updates the view.\n     * @param {number} x the new offset\n     */\n    ,\n    set: function set(x) {\n      this.setView({\n        x: x\n      });\n    }\n    /**\n     * @retruns {number} the vertical component of the current pan offset\n     */\n\n  }, {\n    key: \"y\",\n    get: function get() {\n      return this._view.y;\n    }\n    /**\n     * Sets the vertical pan offset (clamped by the document extents) and\n     * updates the view.\n     * @param {number} y the new offset\n     */\n    ,\n    set: function set(y) {\n      this.setView({\n        y: y\n      });\n    }\n    /**\n     * @returns {View} a copy of this instance's current view state.\n     */\n\n  }, {\n    key: \"view\",\n    get: function get() {\n      return _extends({}, this._view);\n    }\n    /**\n     * @returns {Extents} a copy of the scale extents currently applied to this\n     * instance.\n     */\n\n  }, {\n    key: \"scaleExtents\",\n    get: function get() {\n      return _extends({}, this._scaleExtents);\n    }\n    /**\n     * Updates the minimum and maximum scale and resets the view transform if it\n     * is outside the new extents.\n     * @param {Extents} extents the new scale extents.\n     */\n    ,\n    set: function set(_ref8) {\n      var min = _ref8.min,\n          max = _ref8.max;\n      this._scaleExtents = {\n        min: min,\n        max: max\n      };\n      this.setView();\n    }\n    /**\n     * @returns {Size} the current document size (used to constrain the pan\n     * offset).\n     */\n\n  }, {\n    key: \"documentSize\",\n    get: function get() {\n      return _extends({}, this._documentSize);\n    }\n    /**\n     * Sets the document size and recalculates the view if it is outside the new\n     * bounds.\n     * @param {Size} size the new document size.\n     */\n    ,\n    set: function set(_ref9) {\n      var width = _ref9.width,\n          height = _ref9.height;\n      this._documentSize = {\n        width: width,\n        height: height\n      };\n      this.setView();\n    }\n    /**\n     * A view matrix expressing a series of transformations.\n     * https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setTransform\n     * @typedef Matrix\n     * @property {number} a horizontal scaling factor (1 == unscaled)\n     * @property {number} b vertical skewing factor (0 == unskewed)\n     * @property {number} c horizontal skewing factor (0 == unskewed)\n     * @property {number} d vertical scaling factor (1 == unscaled)\n     * @property {number} e horizontal translation (0 == untranslated)\n     * @property {number} f vertical translation (0 == untranslated)\n     */\n\n    /**\n     * @returns {Matrix} this coordinate system's current transformation matrix\n     */\n\n  }, {\n    key: \"transformMatrix\",\n    get: function get() {\n      //\n      return {\n        a: this._view.scale,\n        // horizontal scaling\n        b: 0,\n        // vertical skewing\n        c: 0,\n        // horizontal skewing\n        d: this._view.scale,\n        // vertical scaling\n        e: this._view.x,\n        f: this._view.y\n      };\n    }\n    /**\n     * An object expressing the bounds of a canvas object in terms of the\n     * coordinate system.\n     * @typedef CanvasBounds\n     * @property {number} left the left edge of the canvas in client space\n     * @property {number} right the right edge of the canvas in client space\n     * @property {number} top the top edge of the canvas in client space\n     * @property {number} bottom the bottom edge of the canvas in client space\n     * @property {number} canvasWidth the width of the canvas in client space\n     * @property {number} canvasHeight the height of the canvas in client space\n     * @property {ViewPoint} viewMin the top-left corner of the canvas in view space\n     * @property {ViewPoint} viewMax the bottom-right corner of the canvas in view space\n     */\n\n    /**\n     * @returns {CanvasBounds | undefined} the boundaries of the canvas linked to\n     * this coordinate system, or undefined if no canvas is set.\n     */\n\n  }, {\n    key: \"canvasBounds\",\n    get: function get() {\n      if (this._canvas) {\n        var _this$_canvas$getBoun = this._canvas.getBoundingClientRect(),\n            left = _this$_canvas$getBoun.left,\n            top = _this$_canvas$getBoun.top,\n            right = _this$_canvas$getBoun.right,\n            bottom = _this$_canvas$getBoun.bottom;\n\n        return {\n          viewMin: this.clientPointToViewPoint({\n            clientX: left,\n            clientY: top\n          }),\n          viewMax: this.clientPointToViewPoint({\n            clientX: right,\n            clientY: bottom\n          }),\n          left: left,\n          top: top,\n          right: right,\n          bottom: bottom,\n          canvasWidth: this._canvas.width,\n          canvasHeight: this._canvas.height\n        };\n      } else {\n        return undefined;\n      }\n    }\n    /**\n     * @private\n     * @return {{left: number, top: number} | undefined}\n     */\n\n  }, {\n    key: \"canvasRect\",\n    get: function get() {\n      if (this.canvas) {\n        return this.canvas.getBoundingClientRect();\n      } else {\n        return undefined;\n      }\n    }\n    /**\n     * Calculates a variant of the given view clamped according to the scale and\n     * document bounds. Does not modify this instance.\n     * @param {View} view the view constraints to clamp.\n     * @returns {View} a new view object representing the constrained input.\n     */\n\n  }]);\n\n  return CoordinateSystem;\n}();\n\nexport { CoordinateSystem as default };","map":{"version":3,"sources":["/Users/akhandafm/Desktop/examenproject/ajax_project/node_modules/react-canvas-draw/es/coordinateSystem.js"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","_defineProperties","props","descriptor","enumerable","configurable","writable","defineProperty","_createClass","Constructor","protoProps","staticProps","_defineProperty","obj","value","NULL_VIEW_POINT","freeze","x","y","untransformedX","untransformedY","NULL_BOUNDS","canvasWidth","canvasHeight","left","top","right","bottom","viewMin","viewMax","IDENTITY","a","b","c","d","e","f","valueOrDefault","defaultValue","CoordinateSystem","_ref","_this","scaleExtents","documentSize","scale","Set","setView","_ref2","_this$scaleExtents","min","max","_this$documentSize","width","height","_ref3","canvasRect","maxx","minx","_view","maxy","miny","Math","view","newView","clampView","_this$_view","_viewChangeListeners","forEach","listener","deltaScale","clientPoint","viewPt","clientPointToViewPoint","clientPtPostScale","viewPointToClientPoint","clientX","clientY","_ref4","_ref5","relativeClientX","relativeClientY","_ref6","_ref7","relativeX","relativeY","add","_scaleExtents","_documentSize","get","_canvas","set","canvas","_ref8","_ref9","_this$_canvas$getBoun","getBoundingClientRect","undefined","default"],"mappings":"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","sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * @type {ViewPoint}\n */\nvar NULL_VIEW_POINT = Object.freeze({\n  x: 0,\n  y: 0,\n  untransformedX: 0,\n  untransformedY: 0\n});\n/**\n * @type {CanvasBounds}\n */\n\nvar NULL_BOUNDS = Object.freeze({\n  canvasWidth: 0,\n  canvasHeight: 0,\n  left: 0,\n  top: 0,\n  right: 0,\n  bottom: 0,\n  viewMin: NULL_VIEW_POINT,\n  viewMax: NULL_VIEW_POINT\n});\n/**\n * The identity matrix (a transform that results in view coordinates that are\n * identical to relative client coordinates).\n * @type {Matrix}\n */\n\nexport var IDENTITY = Object.freeze({\n  a: 1,\n  b: 0,\n  c: 0,\n  d: 1,\n  e: 0,\n  f: 0\n});\n\nfunction valueOrDefault(value, defaultValue) {\n  if (value === null || typeof value === \"undefined\") {\n    return defaultValue;\n  } else {\n    return value;\n  }\n}\n/**\n * Facilitates calculation and manipulation of a zoom-and-pannable view within a\n * canvas.\n */\n\n\nvar CoordinateSystem = /*#__PURE__*/function () {\n  /**\n   * @typedef Extents\n   * @property {number} min the minimal value in the range\n   * @property {number} max the maximal value in the range\n   */\n\n  /**\n   * @typedef Size\n   * @property {number} width the span of the element's horizontal axis\n   * @property {number} height the span of the element's vertical axis\n   */\n\n  /**\n   * @param {Object} parameters the initialization parameters for this instance.\n   * @param {Extents} parameters.scaleExtents the minimum and maximum allowable scale factor.\n   * @param {Sizee} parameters.documentSize the width and height of the document, in client space.\n   */\n  function CoordinateSystem(_ref) {\n    var _this = this;\n\n    var scaleExtents = _ref.scaleExtents,\n        documentSize = _ref.documentSize;\n\n    _defineProperty(this, \"_scaleExtents\", void 0);\n\n    _defineProperty(this, \"_documentSize\", void 0);\n\n    _defineProperty(this, \"_canvas\", null);\n\n    _defineProperty(this, \"_view\", {\n      scale: 1.0,\n      x: 0,\n      y: 0\n    });\n\n    _defineProperty(this, \"_viewChangeListeners\", new Set());\n\n    _defineProperty(this, \"setScale\", function (scale) {\n      _this.setView({\n        scale: scale\n      });\n    });\n\n    _defineProperty(this, \"clampView\", function (_ref2) {\n      var scale = _ref2.scale,\n          x = _ref2.x,\n          y = _ref2.y;\n      var _this$scaleExtents = _this.scaleExtents,\n          min = _this$scaleExtents.min,\n          max = _this$scaleExtents.max;\n      var _this$documentSize = _this.documentSize,\n          width = _this$documentSize.width,\n          height = _this$documentSize.height;\n\n      var _ref3 = _this.canvasRect || NULL_BOUNDS,\n          left = _ref3.left,\n          top = _ref3.top,\n          right = _ref3.right,\n          bottom = _ref3.bottom;\n\n      var canvasWidth = right - left;\n      var canvasHeight = bottom - top;\n      var maxx = canvasWidth / 2;\n      var minx = -(width * _this._view.scale - canvasWidth / 2);\n      var maxy = canvasHeight / 2;\n      var miny = -(height * _this._view.scale - canvasHeight / 2); // Clamp values to acceptible range.\n\n      return {\n        scale: Math.min(Math.max(scale, min), max),\n        x: Math.min(Math.max(x, minx), maxx),\n        y: Math.min(Math.max(y, miny), maxy)\n      };\n    });\n\n    _defineProperty(this, \"resetView\", function () {\n      _this.setView({\n        scale: 1.0,\n        x: 0,\n        y: 0\n      });\n    });\n\n    _defineProperty(this, \"setView\", function (view) {\n      var newView = _this.clampView(_extends({}, _this._view, view || {}));\n\n      var _this$_view = _this._view,\n          scale = _this$_view.scale,\n          x = _this$_view.x,\n          y = _this$_view.y; // Only trigger if the view actually changed.\n\n      if (newView.scale !== scale || newView.x !== x || newView.y !== y) {\n        _this._view = newView;\n\n        _this._viewChangeListeners.forEach(function (listener) {\n          return listener && listener(newView);\n        });\n      }\n\n      return _extends({}, _this._view);\n    });\n\n    _defineProperty(this, \"scaleAtClientPoint\", function (deltaScale, clientPoint) {\n      var viewPt = _this.clientPointToViewPoint(clientPoint);\n\n      var newView = _this.clampView(_extends({}, _this._view, {\n        scale: _this._view.scale + deltaScale\n      }));\n\n      var clientPtPostScale = _this.viewPointToClientPoint(viewPt, newView);\n\n      newView.x = _this._view.x - (clientPtPostScale.clientX - clientPoint.clientX);\n      newView.y = _this._view.y - (clientPtPostScale.clientY - clientPoint.clientY);\n      return _this.setView(newView);\n    });\n\n    _defineProperty(this, \"clientPointToViewPoint\", function (_ref4, view) {\n      var clientX = _ref4.clientX,\n          clientY = _ref4.clientY;\n\n      if (view === void 0) {\n        view = _this._view;\n      }\n\n      var _ref5 = _this.canvasRect || NULL_BOUNDS,\n          left = _ref5.left,\n          top = _ref5.top;\n\n      var relativeClientX = clientX - left;\n      var relativeClientY = clientY - top;\n      return {\n        x: (relativeClientX - view.x) / view.scale,\n        y: (relativeClientY - view.y) / view.scale,\n        relativeClientX: relativeClientX,\n        relativeClientY: relativeClientY\n      };\n    });\n\n    _defineProperty(this, \"viewPointToClientPoint\", function (_ref6, view) {\n      var x = _ref6.x,\n          y = _ref6.y;\n\n      if (view === void 0) {\n        view = _this._view;\n      }\n\n      var _ref7 = _this.canvasRect || NULL_BOUNDS,\n          left = _ref7.left,\n          top = _ref7.top;\n\n      var relativeX = x * view.scale + view.x;\n      var relativeY = y * view.scale + view.y;\n      var clientX = relativeX + left;\n      var clientY = relativeY + top;\n      return {\n        clientX: clientX,\n        clientY: clientY,\n        relativeX: relativeX,\n        relativeY: relativeY,\n        x: clientX,\n        y: clientY\n      };\n    });\n\n    _defineProperty(this, \"attachViewChangeListener\", function (listener) {\n      _this._viewChangeListeners.add(listener);\n    });\n\n    this._scaleExtents = scaleExtents;\n    this._documentSize = documentSize;\n  }\n  /**\n   * @type {Extents}\n   */\n\n\n  _createClass(CoordinateSystem, [{\n    key: \"canvas\",\n\n    /**\n     * @returns {Canvas} the canvas currently associated with this instance.\n     */\n    get: function get() {\n      return this._canvas;\n    }\n    /**\n     * Updates the canvas for this coordinate system and recalculates the view.\n     * @param {Canvas} canvas the new canvas to associate with this instance.\n     */\n    ,\n    set: function set(canvas) {\n      this._canvas = canvas;\n      this.setView();\n    }\n    /**\n     * @returns {number} the current zoom factor\n     */\n\n  }, {\n    key: \"scale\",\n    get: function get() {\n      return this._view.scale;\n    }\n    /**\n     * Sets the zoom factor (clamped by the scale extents) and updates the view.\n     * @param {number} the new zoom factor\n     */\n\n  }, {\n    key: \"x\",\n\n    /**\n     * @returns {number} the horizontal component of the current pan offset\n     */\n    get: function get() {\n      return this._view.x;\n    }\n    /**\n     * Sets the horizontal pan offset (clamped by the document extents) and\n     * updates the view.\n     * @param {number} x the new offset\n     */\n    ,\n    set: function set(x) {\n      this.setView({\n        x: x\n      });\n    }\n    /**\n     * @retruns {number} the vertical component of the current pan offset\n     */\n\n  }, {\n    key: \"y\",\n    get: function get() {\n      return this._view.y;\n    }\n    /**\n     * Sets the vertical pan offset (clamped by the document extents) and\n     * updates the view.\n     * @param {number} y the new offset\n     */\n    ,\n    set: function set(y) {\n      this.setView({\n        y: y\n      });\n    }\n    /**\n     * @returns {View} a copy of this instance's current view state.\n     */\n\n  }, {\n    key: \"view\",\n    get: function get() {\n      return _extends({}, this._view);\n    }\n    /**\n     * @returns {Extents} a copy of the scale extents currently applied to this\n     * instance.\n     */\n\n  }, {\n    key: \"scaleExtents\",\n    get: function get() {\n      return _extends({}, this._scaleExtents);\n    }\n    /**\n     * Updates the minimum and maximum scale and resets the view transform if it\n     * is outside the new extents.\n     * @param {Extents} extents the new scale extents.\n     */\n    ,\n    set: function set(_ref8) {\n      var min = _ref8.min,\n          max = _ref8.max;\n      this._scaleExtents = {\n        min: min,\n        max: max\n      };\n      this.setView();\n    }\n    /**\n     * @returns {Size} the current document size (used to constrain the pan\n     * offset).\n     */\n\n  }, {\n    key: \"documentSize\",\n    get: function get() {\n      return _extends({}, this._documentSize);\n    }\n    /**\n     * Sets the document size and recalculates the view if it is outside the new\n     * bounds.\n     * @param {Size} size the new document size.\n     */\n    ,\n    set: function set(_ref9) {\n      var width = _ref9.width,\n          height = _ref9.height;\n      this._documentSize = {\n        width: width,\n        height: height\n      };\n      this.setView();\n    }\n    /**\n     * A view matrix expressing a series of transformations.\n     * https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setTransform\n     * @typedef Matrix\n     * @property {number} a horizontal scaling factor (1 == unscaled)\n     * @property {number} b vertical skewing factor (0 == unskewed)\n     * @property {number} c horizontal skewing factor (0 == unskewed)\n     * @property {number} d vertical scaling factor (1 == unscaled)\n     * @property {number} e horizontal translation (0 == untranslated)\n     * @property {number} f vertical translation (0 == untranslated)\n     */\n\n    /**\n     * @returns {Matrix} this coordinate system's current transformation matrix\n     */\n\n  }, {\n    key: \"transformMatrix\",\n    get: function get() {\n      //\n      return {\n        a: this._view.scale,\n        // horizontal scaling\n        b: 0,\n        // vertical skewing\n        c: 0,\n        // horizontal skewing\n        d: this._view.scale,\n        // vertical scaling\n        e: this._view.x,\n        f: this._view.y\n      };\n    }\n    /**\n     * An object expressing the bounds of a canvas object in terms of the\n     * coordinate system.\n     * @typedef CanvasBounds\n     * @property {number} left the left edge of the canvas in client space\n     * @property {number} right the right edge of the canvas in client space\n     * @property {number} top the top edge of the canvas in client space\n     * @property {number} bottom the bottom edge of the canvas in client space\n     * @property {number} canvasWidth the width of the canvas in client space\n     * @property {number} canvasHeight the height of the canvas in client space\n     * @property {ViewPoint} viewMin the top-left corner of the canvas in view space\n     * @property {ViewPoint} viewMax the bottom-right corner of the canvas in view space\n     */\n\n    /**\n     * @returns {CanvasBounds | undefined} the boundaries of the canvas linked to\n     * this coordinate system, or undefined if no canvas is set.\n     */\n\n  }, {\n    key: \"canvasBounds\",\n    get: function get() {\n      if (this._canvas) {\n        var _this$_canvas$getBoun = this._canvas.getBoundingClientRect(),\n            left = _this$_canvas$getBoun.left,\n            top = _this$_canvas$getBoun.top,\n            right = _this$_canvas$getBoun.right,\n            bottom = _this$_canvas$getBoun.bottom;\n\n        return {\n          viewMin: this.clientPointToViewPoint({\n            clientX: left,\n            clientY: top\n          }),\n          viewMax: this.clientPointToViewPoint({\n            clientX: right,\n            clientY: bottom\n          }),\n          left: left,\n          top: top,\n          right: right,\n          bottom: bottom,\n          canvasWidth: this._canvas.width,\n          canvasHeight: this._canvas.height\n        };\n      } else {\n        return undefined;\n      }\n    }\n    /**\n     * @private\n     * @return {{left: number, top: number} | undefined}\n     */\n\n  }, {\n    key: \"canvasRect\",\n    get: function get() {\n      if (this.canvas) {\n        return this.canvas.getBoundingClientRect();\n      } else {\n        return undefined;\n      }\n    }\n    /**\n     * Calculates a variant of the given view clamped according to the scale and\n     * document bounds. Does not modify this instance.\n     * @param {View} view the view constraints to clamp.\n     * @returns {View} a new view object representing the constrained input.\n     */\n\n  }]);\n\n  return CoordinateSystem;\n}();\n\nexport { CoordinateSystem as default };"]},"metadata":{},"sourceType":"module"}